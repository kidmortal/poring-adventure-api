// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../../dev.db"
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  silver        Int             @default(20)
  admin         Boolean         @default(false)
  appearance    Appearance?
  stats         Stats?
  profession    Profession?     @relation(fields: [professionId], references: [id])
  professionId  Int?
  Party         Party?          @relation(fields: [partyId], references: [id])
  partyId       Int?
  equipment     EquippedItem[]
  inventory     InventoryItem[]
  market        MarketListing[]
  notifications Notification[]
  learnedSkills LearnedSkill[]
  buffs         UserBuff[]
}

model Stats {
  id         Int    @id @default(autoincrement())
  level      Int    @default(1)
  experience Int    @default(1)
  health     Int    @default(20)
  maxHealth  Int    @default(20)
  mana       Int    @default(20)
  maxMana    Int    @default(20)
  attack     Int    @default(1)
  str        Int    @default(1)
  agi        Int    @default(1)
  int        Int    @default(1)
  user       User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail  String @unique
}

model InventoryItem {
  id            Int            @id @default(autoincrement())
  stack         Int
  user          User           @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail     String
  item          Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        Int
  marketListing MarketListing?

  @@unique([userEmail, itemId])
}

model EquippedItem {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
  item      Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int

  @@unique([userEmail, itemId])
}

model Appearance {
  id        Int    @id @default(autoincrement())
  head      String
  gender    String
  costume   String
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String @unique
}

model MarketListing {
  id          Int           @id @default(autoincrement())
  price       Int
  stack       Int
  inventory   InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId Int           @unique
  seller      User          @relation(fields: [sellerEmail], references: [email], onDelete: Cascade)
  sellerEmail String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  expiresAt   DateTime?
}

model Item {
  id        Int             @id @default(autoincrement())
  name      String
  category  String
  image     String
  attack    Int?
  str       Int?
  agi       Int?
  int       Int?
  health    Int?
  mana      Int?
  equipped  EquippedItem[]
  inventory InventoryItem[]
  drop      Drop[]
}

model Drop {
  id        Int     @id @default(autoincrement())
  chance    Int
  minAmount Int     @default(1)
  maxAmount Int     @default(1)
  monster   Monster @relation(fields: [monsterId], references: [id])
  monsterId Int
  item      Item    @relation(fields: [itemId], references: [id])
  itemId    Int

  @@unique([monsterId, itemId])
}

model Monster {
  id     Int     @id @default(autoincrement())
  name   String
  image  String
  level  Int     @default(1)
  boss   Boolean @default(false)
  attack Int     @default(1)
  health Int     @default(1)
  silver Int     @default(1)
  exp    Int     @default(1)
  drops  Drop[]
}

model Party {
  id          Int    @id @default(autoincrement())
  leaderEmail String @unique
  members     User[]
}

model Profession {
  id      Int     @id @default(autoincrement())
  name    String
  costume String  @default("none")
  attack  Int     @default(1)
  health  Int     @default(1)
  mana    Int     @default(1)
  str     Int     @default(1)
  agi     Int     @default(1)
  int     Int     @default(1)
  skills  Skill[]
  user    User[]
}

model Skill {
  id            Int            @id @default(autoincrement())
  requiredLevel Int            @default(1)
  manaCost      Int            @default(1)
  category      String         @default("target_enemy")
  effect        String?
  name          String
  image         String
  attribute     String
  multiplier    Int            @default(1)
  profession    Profession     @relation(fields: [professionId], references: [id])
  professionId  Int
  learnedSkill  LearnedSkill[]
  buff          Buff?          @relation(fields: [buffId], references: [id])
  buffId        Int?
}

model LearnedSkill {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail    String
  skill        Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      Int
  masteryLevel Int     @default(1)
  equipped     Boolean @default(false)

  @@unique([userEmail, skillId])
}

model Notification {
  id         Int     @id @default(autoincrement())
  content    String
  visualized Boolean
  user       User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail  String  @unique
}

model UserBuff {
  id        Int    @id @default(autoincrement())
  buff      Buff   @relation(fields: [buffId], references: [id])
  buffId    Int
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
  duration  Int

  @@unique([userEmail, buffId])
}

model Buff {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  effect   String     @default("none")
  duration Int
  image    String
  pose     String     @default("default")
  persist  Boolean    @default(false)
  maxStack Int        @default(1)
  UserBuff UserBuff[]
  Skill    Skill[]
}
